`timescale 1ns / 1ps
//*************************************************************************
//   > 文件名: carry4.v
//   > 描述  : 4位并行进位计算模块
//   > 作者  : LOONGSON
//   > 日期  : 2017-08-04
//*************************************************************************
module carry4 (           // 4位并行进位计算模块
    input  [3:0] p_bit,   // 每一位的进位传递因子
    input  [3:0] g_bit,   // 每一位的进位生成因子
    input        cin,     // 来自低位的进位
    output       p_block, // 本块的进位传递因子
    output       g_block, // 本块的进位生成因子
    output [2:0] cout     // 每一位的进位输入
);
    // 第i位的进位生成因子g_bit[i]=1表示在c[i+1]必定产生一个进位，
	// 与c[i]无关；
	// 第i位的进位传递因子p_bit[i]=1表示如果c[i]有一个进位输入，
	// 该进位可以传播至c[i+1]。
	// 块的进位生成因子g_block=1表示本块有进位生成，
	// 块的进位传播因子p_block=1表示本块可以传播低位的进位。
	
	// 块进位传播因子
	// 当每一位都可以传播低位的进位时，这4位组成的块可以传播低位进位
    assign p_block = &p_bit;
	// 块进位生成因子
    assign g_block = g_bit[3]                                     // 第3位产生一个向第4位的进位 或
	                | (p_bit[3] & g_bit[2])                         // 第2位产生一个向第3位进位且该进位可以传播至第4位 或
				          | (p_bit[3] & p_bit[2] & g_bit[1])              // 第1位产生一个向第2位的进位且该进位可以传播至第4位 或
                  | (p_bit[3] & p_bit[2] & p_bit[1] & g_bit[0]);  // 第0位产生一个向第1位的进位且该进位可以传播至第4位

	// cout[0]~cout[2]为第1~3位来自低位的进位输入
	// 第0位的进位输入为cin
	// 第i位的进位输入=第i-1位产生进位 或 低于第i位产生一个进位且可以传播至第i位 或 第0位的进位输入可以传播至第i位
    assign cout[0] = g_bit[0] | (p_bit[0] & cin);
    assign cout[1] = g_bit[1] | (p_bit[1] & g_bit[0]) | (p_bit[1] & p_bit[0] & cin);
    assign cout[2] = g_bit[2] | (p_bit[2] & g_bit[1]) | (p_bit[2] & p_bit[1] & g_bit[0]) | (p_bit[2] & p_bit[1] & p_bit[0] & cin);
endmodule
