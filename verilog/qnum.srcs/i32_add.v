`timescale 1ns / 1ps
//*************************************************************************
//   > 文件名: adder32.v
//   > 描述  : 32位加法器模块
//   > 作者  : LOONg_blockSON
//   > 日期  : 2017-08-04
//*************************************************************************
module i32_add(        // 32位加法器
    input  [31:0] a,   // 源操作数1
    input  [31:0] b,   // 源操作数2
    input         cin, // 来自低位进位
    output [31:0] sum, // 和
    output        cout // 向高位的进位
    );

	// 先行进位加法器
	// 先提前并行计算每一位的进位，
	// 计算每一位的结果只要将本地和与进位相加
	// p_bit[i]：第i位的进位传递因子
	// g_bit[i]：第i位的进位生成因子
	// 采用三层先行进位结构
	// 第一层：4位一组，共8组
	// 第二层：4位一组，共2组
	// 第三层：计算第2层的进位
//  -----------------------------------------------------------------------------------
//  |                                         第 3 层                                 |
//  -----------------------------------------------------------------------------------                             
//                                              2l
//  --------------------------------------------  -------------------------------------
//  |                                         第 2 层                                 |
//  |                                          |  |                                   |
//  --------------------------------------------  -------------------------------------
//                   1h                                             1l
//  -----------  ---------  ---------  ---------  ---------  --------  -------  -------
//  |         |  |       |  |       |  |      第 1 层     |  |      |  |     |  |     |
//  |         |  |       |  |       |  |       |  |       |  |      |  |     |  |     |
//  -----------  ---------  ---------  ---------  ---------  --------  -------  -------
//  31 30 29 28  27 ... 24  23 ... 20  19 ... 16  15 ... 12  11 ... 8  7 ... 4  3 2 1 0
    wire [31:0] p_bit, g_bit;       // 第一层输入
    wire [ 3:0] p_block_1l, g_block_1l, p_block_1h, g_block_1h; // 第一层输出，第二层输入
    wire        p_block_2l, g_block_2l;  // 第二层进位输出
    wire [31:0] c;                  // 每一位的进位

    assign c[0] = cin;
    assign p_bit = a | b; // a[i]+b[i]+c[i-1]: 0+1+1=10, 1+0+1=10, 1+1+1=11 
    assign g_bit = a & b; // a[i]+b[i]: 1+1=10

    // carry4并行计算4位的进位
    carry4 c0_3(
        .p_bit   ( p_bit[3:0]    ), // i, 4
        .g_bit   ( g_bit[3:0]    ), // i, 4
        .cin     ( c[0]          ), // i, 1
        .p_block ( p_block_1l[0] ), // o, 1
        .g_block ( g_block_1l[0] ), // o, 1
        .cout    ( c[3:1]        )  // o, 3
    );
    carry4 c4_7(
        .p_bit   ( p_bit[7:4]    ), // i, 4
        .g_bit   ( g_bit[7:4]    ), // i, 4
        .cin     ( c[4]          ), // i, 1
        .p_block ( p_block_1l[1] ), // o, 1
        .g_block ( g_block_1l[1] ), // o, 1
        .cout    ( c[7:5]        )  // o, 3
    );
    carry4 c8_11(
        .p_bit   ( p_bit[11:8]   ), // i, 4
        .g_bit   ( g_bit[11:8]   ), // i, 4
        .cin     ( c[8]          ), // i, 1
        .p_block ( p_block_1l[2] ), // o, 1
        .g_block ( g_block_1l[2] ), // o, 1
        .cout    ( c[11:9]       )  // o, 3
    );
    carry4 c12_15(
        .p_bit   ( p_bit[15:12]  ), // i, 4
        .g_bit   ( g_bit[15:12]  ), // i, 4
        .cin     ( c[12]         ), // i, 1
        .p_block ( p_block_1l[3] ), // o, 1
        .g_block ( g_block_1l[3] ), // o, 1
        .cout    ( c[15:13]      )  // o, 3
    );
    carry4 c_2l(
        .p_bit   ( p_block_1l        ), // i, 4
        .g_bit   ( g_block_1l        ), // i, 4
        .cin     ( c[0]              ), // i, 1
        .p_block ( p_block_2l        ), // o, 1
        .g_block ( g_block_2l        ), // o, 1
        .cout    ( {c[12],c[8],c[4]} )  // o, 3
    );
    carry4 c16_19(
        .p_bit   ( p_bit[19:16]  ), // i, 4
        .g_bit   ( g_bit[19:16]  ), // i, 4
        .cin     ( c[16]         ), // i, 1
        .p_block ( p_block_1h[0] ), // o, 1
        .g_block ( g_block_1h[0] ), // o, 1
        .cout    ( c[19:17]      )  // o, 3
    );
    carry4 c20_23(
        .p_bit   ( p_bit[23:20]  ), // i, 4
        .g_bit   ( g_bit[23:20]  ), // i, 4
        .cin     ( c[20]         ), // i, 1
        .p_block ( p_block_1h[1] ), // o, 1
        .g_block ( g_block_1h[1] ), // o, 1
        .cout    ( c[23:21]      )  // o, 3
    );
    carry4 c24_27(
        .p_bit   ( p_bit[27:24]  ), // i, 4
        .g_bit   ( g_bit[27:24]  ), // i, 4
        .cin     ( c[24]         ), // i, 1
        .p_block ( p_block_1h[2] ), // o, 1
        .g_block ( g_block_1h[2] ), // o, 1
        .cout    ( c[27:25]      )  // o, 3
    );
    carry4 c28_31(
        .p_bit   ( p_bit[31:28]  ), // i, 4
        .g_bit   ( g_bit[31:28]  ), // i, 4
        .cin     ( c[28]         ), // i, 1
        .p_block ( p_block_1h[3] ), // o, 1
        .g_block ( g_block_1h[3] ), // o, 1
        .cout    ( c[31:29]      )  // o, 3
    );
    carry4 c2H(
        .p_bit   ( p_block_1h          ), // i, 4
        .g_bit   ( g_block_1h          ), // i, 4
        .cin     ( c[16]               ), // i, 1
        .p_block ( /*p_block_2h */     ), // o, 1
        .g_block ( /*g_block_2h */     ), // o, 1
        .cout    ( {c[28],c[24],c[20]} )  // o, 3
    );

    assign c[16] = g_block_2l | ( p_block_2l & c[0] );

	// 向高位的进位
    assign cout = ( a[31] & b[31] )
                | ( a[31] & c[31] )
                | ( b[31] & c[31] );
    // 和
    assign sum = ( ~a & ~b &  c )
               | ( ~a &  b & ~c )
               | (  a & ~b & ~c )
               | (  a &  b &  c );

endmodule

